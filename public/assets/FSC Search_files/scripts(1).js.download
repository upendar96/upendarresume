function openPage(url){
s="status=yes,toolbar=no,menubar=no,scrollbars=yes,location=no,resizable=yes,width=800,height=300,top=200,left=50";
  if((url != null || url.length!=0))
  window.open(url, null,s);
}
// ****** for table toggle ******
function toggle() {
 if( document.getElementById("table").style.display=='none' )
    {
 document.getElementById("table").style.display = '';
 document.getElementById("RCMcollapsed").style.display = 'none';
 document.getElementById("RCMexpanded").style.display = 'block';
    }
 else{
 document.getElementById("table").style.display = 'none';
 document.getElementById("RCMcollapsed").style.display = 'block';
 document.getElementById("RCMexpanded").style.display = 'none';
 }
 }
 
 function ShowHideTab(obj){
 var myobjid=obj.id;
if(myobjid=="RationCard"){
    document.getElementById("FPSCard").src="../../include/images/fps.png";
	document.getElementById("RationCard").src="../../include/images/Ration_card_active.png"; 
	document.getElementById("AllocationCard").src="../../include/images/allocation.png";		
 	document.getElementById("RationDataDiv").style.display ="block";
 	document.getElementById("FPSDataDiv").style.display ="none";
 	document.getElementById("AllocationDataDiv").style.display ="none";		
 }
 else if(myobjid=="FPSCard")
 {
    document.getElementById("FPSCard").src="../../include/images/fps_active.png";
	document.getElementById("RationCard").src="../../include/images/Ration_card.png";
	document.getElementById("AllocationCard").src="../../include/images/allocation.png";			
 	document.getElementById("RationDataDiv").style.display ="none";
 	document.getElementById("FPSDataDiv").style.display ="block";
 	document.getElementById("AllocationDataDiv").style.display ="none";	
 }
  else if(myobjid=="AllocationCard")
 {
	document.getElementById("FPSCard").src="../../include/images/fps.png";
	document.getElementById("RationCard").src="../../include/images/Ration_card.png";	
	document.getElementById("AllocationCard").src="../../include/images/allocation_active.png";		
 	document.getElementById("RationDataDiv").style.display ="none";
 	document.getElementById("FPSDataDiv").style.display ="none";
 	document.getElementById("AllocationDataDiv").style.display ="block";	
 }
 }

 // ****** submenu ******
 function menuCleanUp()
{  
if (document.all && document.getElementById) {
navmenuRoot = document.getElementById("navmenu");
for (i=0; i<navmenuRoot.childNodes.length; i++) {
  node = navmenuRoot.childNodes[i];
  if (node.nodeName=="LI") {
  node.className=node.className.replace
      (" over", "");
   }
  }
 }
}
startList = function() {
if (document.all && document.getElementById) {
navmenuRoot = document.getElementById("navmenu");
for (i=0; i<navmenuRoot.childNodes.length; i++) {
  node = navmenuRoot.childNodes[i];
  if (node.nodeName=="LI") {
  node.onclick=function() {
  menuCleanUp();
  this.className+=" over";
    }
   }
  }
 }else{

	 navmenuRoot = document.getElementById("navmenu");
	 for (i=0; i<navmenuRoot.childNodes.length; i++) {
	   node = navmenuRoot.childNodes[i];
	   if (node.nodeName=="LI") {
	   node.onclick=function() {
	   menuCleanUp();
	   this.className+=" over";
	     }
	    }
	   }
	  
 }

}





// jcl.js: JavaScript Common behaviours Library

// initialization sequence: init(), initstate(), afterinit()

// -- OpenAjax hub --

if (typeof(window.OpenAjax) == "undefined") {
  // setup the OpenAjax framework - hub
  window.OpenAjax = {};
} // if

if (typeof(OpenAjax.hub) == "undefined") {

// a hub implementation
OpenAjax.hub = {
  implementer: "http://www.mathertel.de/OpenAjax",
  implVersion: "0.4",
  specVersion: "0.5",
  implExtraData: {},

  // ----- library management -----

  // the list of libraries that have registered
  libraries: {},

  // Registers an Ajax library with the OpenAjax Hub. 
  registerLibrary: function (p, u, v, e) {
    var entry = { prefix: p, namespaceURI: u, version: v, extraData:e };
    this.libraries[p] = entry;
    this.publish("org.openajax.hub.registerLibrary", entry);
  },

  // Unregisters an Ajax library with the OpenAjax Hub.
  unregisterLibrary: function (p) {
    var entry = this.libraries[p];
    this.publish("org.openajax.hub.unregisterLibrary", entry);
    if (entry)
      this.libraries[p] = null;
  },

  // ----- event management -----

  _regs: {},
  _regsId: 0,

  /// name, callback, scope, data, filter
  subscribe: function (n, c, s, d, f) {
    var h = this._regsId;

    s = s || window;

    // treating upper/lowercase equal is not clearly defined, but true with domain names.
    var rn = n.toLocaleLowerCase();

    // build a regexp pattern that will match the event names
    rn = rn.replace(/\*\*$/, "\S{0,}").replace(/\./g, "\\.").replace(/\*/g, "[^.]*");

    var entry = {id:h, n:rn, c:c, s:s, d:d, f:f};
    this._regs[h] = entry;

    this._regsId++;
    return(h);
  }, // subscribe


  unsubscribe: function (h) {
    this._regs[h] = null;
  }, // unsubscribe


  publish: function (n, data) {
    if ((n) && (n.length > 0)) {
      n = n.toLocaleLowerCase();
      //alert("happy=======>"+n);
      for (var h in this._regs) {
        var r = this._regs[h];
        if (r && (n.match(r.n))) {
          var ff = r.f; if (typeof(ff) == "string") ff = r.s[ff];
          var fc = r.c; if (typeof(fc) == "string") fc = r.s[fc];
          if ((!ff) || (ff.call(r.s, n, data, r.d)))
            fc.call(r.s, n, data, r.d);
        } // if
      } // for
    } // if
  } // publish

}; // OpenAjax.hub
OpenAjax.hub.registerLibrary("aoa", "http://www.mathertel.de/OpenAjax", "0.4", {});

} // if (! hub)

OpenAjax.hub.registerLibrary("jcl", "http://www.mathertel.de/Behavior", "1.2", {});

// -- Javascript Control Library (behaviors) --

if (typeof (window.jcl) == "undefined") {
  // setup the jcl root object.
  window.jcl = {};
} // if

// Detect InternetExplorer for some specific implementation differences.
jcl.isIE = (window.navigator.userAgent.indexOf("MSIE") > 0);

/// A list with all objects that are attached to any behaviour
jcl.List = [];

// attach events, methods and default-values to a html object (using the english spelling)
jcl.LoadBehaviour = function (obj, behaviour) {
  if ((obj) && (obj.constructor == String))
    obj = document.getElementById(obj);

  if (obj == null) {
   // alert("LoadBehaviour: obj argument is missing.");
  } else if (behaviour == null) {
   // alert("LoadBehaviour: behaviour argument is missing.");

  } else {
    if (behaviour.inheritFrom) {
      jcl.LoadBehaviour(obj, behaviour.inheritFrom);
      jcl.List.pop();
    }

    if ((!jcl.isIE) && (obj.attributes)) {
      // copy all attributes to jcl.properties
      for (var n = 0; n < obj.attributes.length; n++)
        if (obj[obj.attributes[n].name] == null)
          obj[obj.attributes[n].name] = obj.attributes[n].value;
    } // if
    
    for (var p in behaviour) {
      if (p.substr(0, 2) == "on") {
    	 // alert("helll==11111111111111============>"+p);
        jcl.AttachEvent(obj, p, behaviour[p].bind(obj));
       // alert("helll===2222222222===========>"+jcl.AttachEvent(obj, p, behaviour[p].bind(obj)));
      } else if ((behaviour[p] == null) || (behaviour[p].constructor != Function)) {
        // set default-value
        if (obj[p] == null)
          obj[p] = behaviour[p];

      } else {
        // attach method
        obj[p] = behaviour[p];
      } // if
    } // for
    
    obj._attachedBehaviour = behaviour;
  } // if
  if (obj)
    jcl.List.push(obj);
}; // LoadBehaviour


/// Find the parent node of a given object that has the behavior attached.
jcl.FindBehaviourElement = function (obj, behaviourDef) {
  while ((obj) && (obj._attachedBehaviour != behaviourDef))
    obj = obj.parentNode;
  return(obj);
}; // FindBehaviourElement


/// Find the child elements with a given className contained by obj.
jcl.getElementsByClassName = function (obj, cName) {
  var ret = new Array();
  var allNodes = obj.getElementsByTagName("*");
  for (var n = 0; n < allNodes.length; n++) {
    if (allNodes[n].className == cName)
      ret.push(allNodes[n]);
  }
  return(ret);
}; // getElementsByClassName


/// Find the child elements with a given name contained by obj.
jcl.getElementsByName = function (obj, cName) {
  var ret = new Array();
  var allNodes = obj.getElementsByTagName("*");
  for (var n = 0; n < allNodes.length; n++) {
    if (allNodes[n].name == cName)
      ret.push(allNodes[n]);
  }
  return(ret);
}; // getElementsByName


// cross browser compatible helper to register for events
jcl.AttachEvent = function (obj, eventname, handler) {
  if (jcl.isIE) {
    obj.attachEvent(eventname, handler);
  } else { 
    obj.addEventListener(eventname.substr(2), handler, false);
  } // if
}; // AttachEvent


// cross browser compatible helper to register for events
jcl.DetachEvent = function (obj, eventname, handler) {
  if (jcl.isIE) {
    obj.detachEvent(eventname, handler);
  } else { 
    obj.removeEventListener(eventname.substr(2), handler, false);
  } // if
}; // DetachEvent


/// Create a duplicate of a given JavaScript Object.
/// References are not duplicated !
jcl.CloneObject = function (srcObject) {
  var tarObject = new Object();
  for (var p in srcObject)
    tarObject[p] = srcObject[p];
  return(tarObject);
}; // CloneObject


// calculate the absolute position of an html element
jcl.absolutePosition = function(obj) {
  var pos = null;
  
  if (obj) {
    pos = new Object();
    pos.top = obj.offsetTop;
    pos.left = obj.offsetLeft;
    pos.width = obj.offsetWidth;
    pos.height= obj.offsetHeight;

    obj = obj.offsetParent;
    while (obj) {
      pos.top += obj.offsetTop;
      pos.left += obj.offsetLeft;
      obj = obj.offsetParent;
    } // while
  }
  return(pos);
}; // _absolutePosition


/// When an object publishes or subscribes events it is possible to define the complete eventname
/// by a local eventname and a eventnamespace of a surrounding object.
jcl.BuildFullEventname = function (obj) {
  var en = null;
  
  // find the local event name on the object itself.
  if (! obj) {
    return(null);
  } else if ((obj.eventname) && (obj.eventname.length >0)) {
    en = obj.eventname;
  } else if ((obj.attributes["eventname"]) && (obj.attributes["eventname"].value.length > 0)) {
    en = obj.attributes["eventname"].value;
  } // if
  
  // search the event namespace if not present in the local eventname.
  if ((en) && (en.indexOf('.') < 0)) {
    while ((obj) && (! obj.eventnamespace) && ((obj.attributes) && (! obj.attributes["eventnamespace"])))
      obj = obj.parentNode;
    if (obj == document) {
      en = "jcl." + en; // default namespace, if none is specified.
    } else if ((obj) && (obj.eventnamespace)) {
      en = obj.eventnamespace + "." + en;
    } else if ((obj) && (obj.attributes["eventnamespace"])) {
      en = obj.attributes["eventnamespace"].value + "." + en;
    } // if
  } // if
  return(en);
}; // BuildFullEventname


/// Return the local part of a full qualified eventname.
jcl.LocalEventName = function (evn) {
  var idx;
  if (evn) {
    idx = evn.lastIndexOf('.');
    if (idx >= 0)
      evn = evn.substr(idx+1);
  } // if
  return(evn);
}; // LocalEventName


/// Return the eventnamesapce of a full qualified eventname.
jcl.EventNameSpace = function (evn) {
  var idx;
  if (evn) {
    idx = evn.lastIndexOf('.');
    if (idx >= 0)
      evn = evn.substr(0, idx);
    else
      evn = null;
  } // if
  return(evn);
}; // EventNameSpace


// find a relative link to the controls folder containing jcl.js
jcl.GetControlsPath = function () {
  var path = "../controls/";
  var s;
  for (var n in document.scripts) {
    s = String(document.scripts[n].src);
    if ((s) && (s.length >= 6) && (s.substr(s.length -6).toLowerCase() == "jcl.js"))
      path = s.substr(0,s.length -6);
  } // for
 // alert("d============path=============================path================>"+path);
  return(path);
}; // GetControlsPath


// init all objects when the page is loaded
jcl.onload = function(evt) {
  var obj, c;
  evt = evt || window.event;

  // initialize all 
  for (c in jcl.List) {
    obj = jcl.List[c];
    if ((obj) && (obj.init))
      obj.init();
  } // for
  
  for (c in jcl.List) {
    obj = jcl.List[c];
    if ((obj) && (obj.initstate))
      obj.initstate();
  } // for

  for (c in jcl.List) {
    obj = jcl.List[c];
    if ((obj) && (obj.afterinit))
      obj.afterinit();
  } // for
}; // onload


// init all objects when the page is loaded
jcl.onunload = function(evt) {
  evt = evt || window.event;

  for (var n in jcl.List) {
    var obj = jcl.List[n];
    if ((obj) && (obj.term))
      obj.term();
  } // for
}; // onunload


// allow non-submitting input elements
jcl.onkeypress = function(evt) {
  evt = evt || window.event;
 // alert("d============evt=============================evt================>"+evt);
  if (evt.keyCode == 13) {
    var obj = document.activeElement;

    while ((obj) && (obj.nosubmit == null))
      obj = obj.parentNode;

    if ((obj) && ((obj.nosubmit == true) || (obj.nosubmit.toLowerCase() == "true"))) {
      // cancle ENTER / RETURN
      evt.cancelBubble = true;
      evt.returnValue = false;
    } // if
  } // if              
}; // onkeypress



// ----- classname modifications -----

jcl.addClassName = function(elem, className) {
  if (elem.nodeType != 3) {
    jcl.removeClassName (elem, className);
    if (className)
      elem.className = (elem.className + " " + className);
  } // if
}; // addClassName


jcl.removeClassName = function(elem, className) {
	//alert("d==================================11111=======================>");
  if (elem.nodeType != 3) {
    var cn = " " + elem.className + " ";
    if (className)
      cn = cn.replace(" " + className + " ", "");
    cn = cn.replace(/^\s+|\s+$/g, "");
    elem.className = cn;
  } // if
}; // removeClassName


jcl.init = function () {
	// alert("d=========================================================>");
  jcl.AttachEvent(window, "onload", jcl.onload);
  jcl.AttachEvent(window, "onunload", jcl.onunload);
  jcl.AttachEvent(document, "onkeypress", jcl.onkeypress);
}; // init

// document.jcl_isinit (is not declared!) will be set to true to detect multiple jcl includes.
if (document.jcl_isinit)
  //alert("multiple jcl includes detected !");
document.jcl_isinit = true;

jcl.init();

// ----- make FF more IE compatible -----
if (! jcl.isIE) {

  // ----- HTML objects -----

  HTMLElement.prototype.__defineGetter__("innerText", function () { return(this.textContent); });
  HTMLElement.prototype.__defineSetter__("innerText", function (txt) { this.textContent = txt; });

  HTMLElement.prototype.__defineGetter__("XMLDocument", function () { 
    return ((new DOMParser()).parseFromString(this.innerHTML, "text/xml"));
  });


  // ----- Event objects -----

  // enable using evt.srcElement in Mozilla/Firefox
  Event.prototype.__defineGetter__("srcElement", function () {
    var node = this.target;
    while (node.nodeType != 1) node = node.parentNode;
    // test this:
    if (node != this.target) alert("Unexpected event.target!")
    return node;
  });

  // enable using evt.cancelBubble=true in Mozilla/Firefox
  Event.prototype.__defineSetter__("cancelBubble", function (b) {
    if (b) this.stopPropagation();
  });

  // enable using evt.returnValue=false in Mozilla/Firefox
  Event.prototype.__defineSetter__("returnValue", function (b) {
    if (!b) this.preventDefault();
  });


  // ----- XML objects -----
  
  // select the first node that matches the XPath expression
  // xPath: the XPath expression to use
  if (!XMLDocument.selectSingleNode) {
    XMLDocument.prototype.selectSingleNode = function(xPath) {
      var doc = this;
      if (doc.nodeType != 9)
        doc = doc.ownerDocument;
      if (doc.nsResolver == null) doc.nsResolver = function(prefix) { return (null); };
      var node = doc.evaluate(xPath, this, doc.nsResolver, XPathResult.ANY_UNORDERED_NODE_TYPE, null);
      if (node) node = node.singleNodeValue;
      return (node);
    }; // selectSingleNode
  } // if

  // select the first node that matches the XPath expression
  // xPath: the XPath expression to use
  if (!Node.selectSingleNode) {
    Node.prototype.selectSingleNode = function(xPath) {
      var doc = this;
      if (doc.nodeType != 9)
        doc = doc.ownerDocument;
      if (doc.nsResolver == null) doc.nsResolver = function(prefix) { return(null); };
      var node = doc.evaluate(xPath, this, doc.nsResolver, XPathResult.ANY_UNORDERED_NODE_TYPE, null);
      if (node) node = node.singleNodeValue;
      return(node);
    }; // selectSingleNode
  } // if


  Node.prototype.__defineGetter__("text", function () {
    return(this.textContent);
  }); // text

}


// ----- Enable an easy attaching methods to events -----
// see http://digital-web.com/articles/scope_in_javascript/

Function.prototype.bind = function(obj) {
  var method = this, temp = function() {
    return method.apply(obj, arguments);
  }
  return(temp);
} // Function.prototype.bind

// ----- End -----




// controls/popup.js
// Javascript Behaviour for the popup control
// ----- 

var PopUpBehaviour = {

  // ----- Properties -----
  _obj: null, // the current hovered object
  _timer: null, // a timer that will trigger the creation of the popUp Information.
  _popobj: null, // the current hovered object

  // ----- Events -----

  // set a timer to show the popUp information in a moment
  onmouseover: function(evt) {
    evt = evt || window.event;
    var obj = evt.srcElement;
    if ((! jcl.isIE) && (obj != null) && (obj.attributes["poptext"] != null))
      obj.poptext = obj.attributes["poptext"].value;
   // alert(" obj.attributes[poptext].value"+ obj.attributes["poptext"].value);
    if ((obj != null) && (obj.poptext != null) && (obj != PopUpBehaviour._obj)) {
      PopUpBehaviour._obj = obj;
      PopUpBehaviour._timer = window.setTimeout(PopUpBehaviour.show, 300);
    } // if
  }, // onmouseover


  // terminate the timer and remove the popUp information
  onmouseout: function(evt) {
    evt = evt || window.event;
    var obj = evt.srcElement;
    if ((obj != null) && (obj == PopUpBehaviour._obj)) {
      if (PopUpBehaviour._timer != null)
        window.clearTimeout(PopUpBehaviour._timer);
      else
        PopUpBehaviour._popobj.style.display = "none";
      PopUpBehaviour._timer = null;
      PopUpBehaviour._obj = null;
    } // if
  }, // onmouseout
  

  // now show the popUp information
  show: function(evt) {
    var obj = PopUpBehaviour._obj;
  //  alert("obj=============>"+obj);
    if (obj != null) {
      pos = PopUpBehaviour._absolutePosition(obj);
      var o = PopUpBehaviour._create(obj.poptext, pos);
      PopUpBehaviour._popobj = o;
    } // if
    PopUpBehaviour._timer = null;
  }, // show
  

  // --- private methods ---
  
  // create or reuse the popUp element
  _create: function(text, pos) {
    var oPop = document.getElementById("VEPopUp");
    var oPoint;
    
    if (oPop == null) {
      // create a popUp object for the first time
      oPop = document.createElement("div");
      oPop.id= "VEPopUp";
      oPop.style.position = "absolute";
      // box size
	  oPop.style.width = "180px";
	
	  var htm = "<img src='../images/point.gif' style='position:absolute;z-index:1;left:15px;top:1px;'>";
	  //style='position:absolute;z-index:1;left:0px;top:1px;'>";
	  //style='position:relative;display:block;top:1px;z-index:1'>";
	  
      htm += "<div style='position:absolute;z-index:1;left:0px;top:17px;'><div class='VEShadow'></div><div style='position:relative;border: solid #203050 1px; padding: 4px; background-image:url(../images/buttonbackpushed.png);background-color:#eaeef7; background-position:top;background-repeat:repeat-x;'></div></div>";
      oPop.innerHTML = htm;
     // alert("hello====>"+oPop.innerHTML);
      document.body.appendChild(oPop);
    } // if

    // adjust tht position and choos the right point gif file
    oPoint = oPop.firstChild; // point gif file

    oPop.style.display="block";
    oPop.style.top = (pos.top + pos.height) + "px";
    var leftPos = pos.left + pos.width/2 - 40;
   // alert("leftPos=============>"+leftPos);
    if (leftPos < 8) {
      oPop.style.left = "8px";
      oPoint.src = String(oPoint.src).replace(/pointleft.gif/i, "point.gif");
      oPoint.style.marginLeft = "12px";
    } else if (leftPos + 240 < document.documentElement.clientWidth) {
      oPop.style.left = leftPos + "px";
      oPoint.src = String(oPoint.src).replace(/pointleft.gif/i, "point.gif");
      oPoint.style.marginLeft = "40px";
    } else {
      leftPos = pos.left + pos.width/2 - 200;
      if (leftPos + 250 > document.documentElement.clientWidth)
        leftPos = document.documentElement.clientWidth - 250;
      oPop.style.left = leftPos + "px";
      oPoint.src = String(oPoint.src).replace(/point.gif/i, "pointleft.gif");
      oPoint.style.marginLeft = "180px";
    } // if

    // adjust the shadow object
    var b = oPop.firstChild.nextSibling.firstChild; // shadow object
    b.nextSibling.innerHTML = text;
    b.style.height = b.nextSibling.offsetHeight + "px";
    return(oPop); 
  }, // _create


  // get the absolute position of a html object
  _absolutePosition: function(obj) {
    var pos = null;
    
    if (obj != null) {
      pos = new Object();
      pos.top = obj.offsetTop;
      pos.left = obj.offsetLeft;
      pos.width = obj.offsetWidth;
      pos.height= obj.offsetHeight;

      obj = obj.offsetParent;
      while (obj != null) {
        pos.top += obj.offsetTop;
        pos.left += obj.offsetLeft;
        obj = obj.offsetParent;
      } // while
    }
    return(pos);
  } // _absolutePosition

} // PopUpBehaviour

jcl.LoadBehaviour(document, PopUpBehaviour);  
